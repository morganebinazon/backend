import axios from 'axios';

// V√©rification de la cl√© API
if (!process.env.GEMINI_API_KEY) {
  console.error('‚ùå GEMINI_API_KEY n\'est pas d√©finie dans les variables d\'environnement');
  process.exit(1);
}

console.log('‚úÖ GEMINI_API_KEY trouv√©e:', process.env.GEMINI_API_KEY.substring(0, 10) + '...');

// Configuration pour l'API Gemini 2.0 Flash
const GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${process.env.GEMINI_API_KEY}`;

// Stockage des conversations en m√©moire (pour maintenir le contexte)
const conversations = new Map();

// Fonction pour appeler l'API Gemini 2.0 Flash directement
const callGeminiAPI = async (conversationHistory) => {
  try {
    console.log('üöÄ Appel √† l\'API Gemini 2.0 Flash avec historique...');
    
    const requestBody = {
      contents: conversationHistory,
      generationConfig: {
        temperature: 0.7,
        topP: 0.8,
        topK: 40,
        maxOutputTokens: 2048,
      }
    };

    const response = await axios.post(GEMINI_API_URL, requestBody, {
      headers: {
        'Content-Type': 'application/json',
      },
      timeout: 30000, // 30 secondes de timeout
    });

    if (response.data && response.data.candidates && response.data.candidates.length > 0) {
      const textContent = response.data.candidates[0].content.parts[0].text;
      console.log('‚úÖ R√©ponse Gemini re√ßue');
      return textContent;
    } else {
      throw new Error('Format de r√©ponse inattendu de l\'API Gemini');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur API Gemini:', error.response?.data || error.message);
    throw error;
  }
};

// Prompt syst√®me ultra-focalis√© sur la mission paie
const getFocusedSystemPrompt = () => {
  return `Tu es PayeBot, l'assistant virtuel EXCLUSIVEMENT d√©di√© √† la simulation de paie pour l'Afrique de l'Ouest (B√©nin, Togo, etc.).

## üéØ TA MISSION UNIQUE ET STRICTE :
- Calculs de paie (salaire brut ‚Üî net)
- R√®gles fiscales et sociales (ITS, IRPP, CNSS, AMU)
- Utilisation de la plateforme PayeAfrique
- Conseils sur cotisations et charges sociales
- Formation sur la l√©gislation du travail (B√©nin/Togo)

## üö´ SUJETS INTERDITS - TU DOIS POLIMENT REFUSER :
- Culture populaire (films, musique, c√©l√©brit√©s, sports)
- Politique g√©n√©rale (sauf fiscalit√©/paie)
- Technologie g√©n√©rale (sauf outils paie/RH)
- Sant√©/m√©decine (sauf cong√©s maladie/accidents travail)
- Voyages/tourisme (sauf d√©placements professionnels)
- Cuisine/recettes
- Jeux et divertissements
- Sciences g√©n√©rales
- Histoire g√©n√©rale (sauf histoire sociale/fiscale)

## üîÑ STRAT√âGIE DE RECENTRAGE INTELLIGENT :
Quand on te pose une question hors-sujet :

1. **RECONNAIS** poliment la question
2. **RELIE** subtilement au domaine paie si possible
3. **REDIRIGE** fermement vers ton expertise
4. **PROPOSE** une alternative paie pertinente

### Exemples de redirection :
- "Sport" ‚Üí "Int√©ressant ! En parlant de performance, saviez-vous que certaines entreprises offrent des primes de rendement ? Voulez-vous calculer l'impact fiscal ?"
- "Musique" ‚Üí "La cr√©ativit√© c'est important ! D'ailleurs, les artistes au B√©nin ont-ils un r√©gime fiscal sp√©cial ? Parlons plut√¥t des cotisations sociales..."
- "Films" ‚Üí "Les divertissements sont importants ! Cela me fait penser aux avantages en nature. Voulez-vous simuler leur impact sur le salaire net ?"

## üéØ MESSAGES DE RECENTRAGE TYPES :
- "C'est une question int√©ressante, mais je suis sp√©cialis√© uniquement dans la paie et les simulations salariales."
- "Je pr√©f√®re rester dans mon domaine d'expertise : les calculs de salaire pour le B√©nin et le Togo."
- "Revenons √† ce que je fais de mieux : vous aider avec vos simulations de paie !"

## üí° ADAPTATION LINGUISTIQUE INTELLIGENTE :
- D√©tecte automatiquement la langue (fran√ßais, anglais, espagnol)
- R√©ponds TOUJOURS dans la langue de l'utilisateur
- Utilise la devise appropri√©e (XOF pour B√©nin/Togo)
- Maintiens le contexte de conversation

## üìä FORMAT SP√âCIAL POUR CALCULS :
Si tu peux effectuer un calcul de salaire :

CALCUL_RESULT: {
  "brut": montant_brut_numerique,
  "net": montant_net_calcul√©,
  "pays": "pays_detect√©",
  "devise": "XOF_ou_autre",
  "details": "explication_courte"
}

## üé≠ PERSONNALIT√â PROFESSIONNELLE :
- Expert passionn√© de paie
- P√©dagogue patient
- Toujours poli mais ferme sur le p√©rim√®tre
- Proactif dans les suggestions paie
- Bienveillant mais focus mission

## ‚ö° R√àGLE D'OR :
Chaque r√©ponse doit soit :
1. R√©pondre directement √† une question paie
2. Rediriger poliment vers la paie
3. Proposer un calcul ou simulation

Ne JAMAIS d√©battre longuement sur des sujets hors-p√©rim√®tre. Redirige TOUJOURS vers ta mission principale.

EXEMPLE PARFAIT :
Utilisateur: "Qui a gagn√© la Coupe d'Afrique ?"
Toi: "Je ne suis pas un expert de sport, mais plut√¥t de paie ! üòä En revanche, les primes de victoire des sportifs professionnels au B√©nin sont-elles imposables ? Voulez-vous que nous calculions l'impact fiscal d'une prime exceptionnelle ?"`;
};

// Fonction pour d√©tecter si une question est hors-sujet
const isOffTopicQuestion = (message) => {
  const offTopicKeywords = [
    // Culture populaire
    'film', 'movie', 'cin√©ma', 'acteur', 'actrice', 'netflix', 's√©rie', 'tv',
    'musique', 'chanson', 'chanteur', 'musicien', 'album', 'concert', 'festival',
    'sport', 'football', 'basketball', 'tennis', 'coupe', 'championnat', '√©quipe',
    'c√©l√©brit√©', 'star', 'famous', 'celebrity',
    
    // Technologie g√©n√©rale (hors paie)
    'smartphone', 'iphone', 'android', 'facebook', 'instagram', 'tiktok', 'twitter',
    'jeux video', 'gaming', 'playstation', 'xbox',
    
    // Autres sujets
    'm√©t√©o', 'weather', 'cuisine', 'recette', 'restaurant', 'voyage', 'vacances',
    'politique g√©n√©rale', '√©lection', 'pr√©sident', 'gouvernement',
    'sant√© g√©n√©rale', 'm√©decin', 'maladie', 'sympt√¥me',
    'amour', 'relation', 'mariage', 'divorce',
    'animaux', 'chat', 'chien', 'pet'
  ];

  const messageLower = message.toLowerCase();
  return offTopicKeywords.some(keyword => 
    messageLower.includes(keyword) && 
    !messageLower.includes('salaire') && 
    !messageLower.includes('paie') &&
    !messageLower.includes('travail') &&
    !messageLower.includes('emploi')
  );
};

// Fonction pour extraire et calculer automatiquement les r√©sultats
const extractCalculationFromResponse = (response) => {
  try {
    // Chercher le pattern CALCUL_RESULT dans la r√©ponse
    const calcPattern = /CALCUL_RESULT:\s*({[^}]+})/;
    const match = response.match(calcPattern);
    
    if (match) {
      const calcData = JSON.parse(match[1]);
      
      // Nettoyer la r√©ponse en retirant le JSON
      const cleanResponse = response.replace(calcPattern, '').trim();
      
      return {
        hasCalculation: true,
        response: cleanResponse,
        calculation: calcData
      };
    }
    
    return {
      hasCalculation: false,
      response: response,
      calculation: null
    };
  } catch (error) {
    console.log('Erreur extraction calcul:', error);
    return {
      hasCalculation: false,
      response: response,
      calculation: null
    };
  }
};

// Fonction pour obtenir un ID de session (ici simplifi√© avec l'IP)
const getSessionId = (req) => {
  return req.ip || req.connection.remoteAddress || 'default';
};

// Fonction pour g√©rer l'historique de conversation
const getConversationHistory = (sessionId) => {
  if (!conversations.has(sessionId)) {
    conversations.set(sessionId, []);
  }
  return conversations.get(sessionId);
};

const addToConversationHistory = (sessionId, role, content) => {
  const history = getConversationHistory(sessionId);
  history.push({
    role: role,
    parts: [{ text: content }]
  });
  
  // Limiter l'historique √† 20 messages (10 √©changes)
  if (history.length > 20) {
    history.splice(0, history.length - 20);
  }
  
  conversations.set(sessionId, history);
};

// Contr√¥leur principal du chatbot
export const chatbot = async (req, res) => {
  try {
    const { message } = req.body;
    const sessionId = getSessionId(req);

    console.log('üì© Message re√ßu:', message);
    console.log('üîë Session ID:', sessionId);

    if (!message || typeof message !== 'string') {
      return res.status(400).json({
        error: 'Message requis et doit √™tre une cha√Æne de caract√®res'
      });
    }

    // üö® CONTR√îLE ANTI-D√âRIVE : D√©tecter les sujets hors-p√©rim√®tre
    if (isOffTopicQuestion(message)) {
      console.log('‚ö†Ô∏è Question hors-sujet d√©tect√©e:', message);
      
      // Ajouter un pr√©fixe au prompt pour forcer le recentrage
      const redirectMessage = `[ATTENTION: L'utilisateur pose une question hors-sujet "${message}". Tu DOIS poliment rediriger vers la paie/simulation salariale en utilisant ta strat√©gie de recentrage intelligent.]

Message utilisateur: ${message}`;

      const modifiedMessage = redirectMessage;
      message = modifiedMessage; // Override du message pour forcer la redirection
    }

    try {
      // R√©cup√©rer l'historique de conversation
      const conversationHistory = getConversationHistory(sessionId);
      
      // Si c'est le premier message ou historique vide, ajouter le prompt syst√®me
      if (conversationHistory.length === 0) {
        const systemPrompt = getFocusedSystemPrompt();
        conversationHistory.push({
          role: 'user',
          parts: [{ text: systemPrompt }]
        });
        conversationHistory.push({
          role: 'model',
          parts: [{ text: `Bonjour ! Je suis PayeBot, votre expert d√©di√© aux simulations de paie pour l'Afrique de l'Ouest. Je suis l√† pour vous aider avec vos calculs de salaire, les r√®gles fiscales du B√©nin et du Togo, et tout ce qui concerne la paie. Comment puis-je vous aider aujourd'hui ?` }]
        });
      }

      // Ajouter le nouveau message de l'utilisateur
      conversationHistory.push({
        role: 'user',
        parts: [{ text: message }]
      });

      // Appel √† l'API Gemini 2.0 Flash avec tout l'historique
      const botReply = await callGeminiAPI(conversationHistory);

      // üîç V√âRIFICATION FINALE : S'assurer que la r√©ponse reste dans le p√©rim√®tre
      if (isOffTopicQuestion(botReply) && !botReply.includes('paie') && !botReply.includes('salaire')) {
        console.log('‚ö†Ô∏è L\'IA a d√©vi√©, correction forc√©e');
        const forcedRedirect = `Je suis d√©sol√©, mais je suis sp√©cialis√© uniquement dans les simulations de paie pour l'Afrique de l'Ouest. Parlons plut√¥t de vos questions sur les salaires, les cotisations sociales, ou les r√®gles fiscales du B√©nin et du Togo. Comment puis-je vous aider avec un calcul de paie ?`;
        
        // Remplacer la r√©ponse d√©viante par une redirection forc√©e
        conversationHistory.push({
          role: 'model',
          parts: [{ text: forcedRedirect }]
        });

        conversations.set(sessionId, conversationHistory);

        return res.json({
          reply: forcedRedirect,
          action: null,
          data: {},
          lang: 'auto'
        });
      }

      // Extraire les calculs potentiels de la r√©ponse
      const { hasCalculation, response: cleanResponse, calculation } = extractCalculationFromResponse(botReply);

      // Ajouter la r√©ponse du bot √† l'historique (version nettoy√©e)
      conversationHistory.push({
        role: 'model',
        parts: [{ text: cleanResponse }]
      });

      // Sauvegarder l'historique mis √† jour
      conversations.set(sessionId, conversationHistory);

      // Pr√©parer la r√©ponse selon qu'il y a un calcul ou non
      if (hasCalculation && calculation) {
        console.log('üßÆ Calcul d√©tect√©:', calculation);
        
        const actionData = {
          reply: cleanResponse,
          action: 'display_paie_result',
          data: {
            brut: calculation.brut,
            net: calculation.net,
            pays: calculation.pays,
            devise: calculation.devise || 'XOF',
            details: calculation.details
          },
          lang: 'auto' // Laisse l'IA g√©rer la langue
        };

        return res.json(actionData);
      } else {
        const actionData = {
          reply: cleanResponse,
          action: null,
          data: {},
          lang: 'auto' // Laisse l'IA g√©rer la langue
        };

        return res.json(actionData);
      }

    } catch (geminiError) {
      console.error('‚ùå Erreur Gemini:', geminiError);
      
      // Fallback intelligent qui reste dans le p√©rim√®tre
      const messageLower = message.toLowerCase();
      let fallbackMessage = 'Je suis PayeBot, votre assistant sp√©cialis√© dans les simulations de paie pour l\'Afrique de l\'Ouest. Comment puis-je vous aider avec vos calculs de salaire ?';
      
      // Adaptation linguistique du fallback
      if (messageLower.includes('hello') || messageLower.includes('hi')) {
        fallbackMessage = 'Hello! I am PayeBot, your payroll simulation assistant for West Africa. How can I help you with salary calculations?';
      } else if (messageLower.includes('hola') || messageLower.includes('gracias')) {
        fallbackMessage = '¬°Hola! Soy PayeBot, tu asistente de simulaci√≥n de n√≥minas para √Åfrica Occidental. ¬øC√≥mo puedo ayudarte con los c√°lculos salariales?';
      }

      res.json({
        reply: fallbackMessage,
        action: null,
        data: {},
        lang: 'auto'
      });
    }

  } catch (error) {
    console.error('‚ùå Erreur chatbot:', error);
    
    res.status(500).json({
      reply: 'D√©sol√©, une erreur est survenue. Je suis PayeBot, votre assistant paie. Comment puis-je vous aider avec vos simulations de salaire ?',
      action: null,
      data: {},
      lang: 'auto'
    });
  }
};

// Contr√¥leur pour obtenir l'historique des conversations
export const getChatHistory = async (req, res) => {
  try {
    const sessionId = getSessionId(req);
    const history = getConversationHistory(sessionId);
    
    res.json({
      message: 'Historique des conversations',
      history: history,
      sessionId: sessionId
    });
  } catch (error) {
    console.error('Erreur r√©cup√©ration historique:', error);
    res.status(500).json({
      error: 'Erreur lors de la r√©cup√©ration de l\'historique'
    });
  }
};

// Contr√¥leur pour effacer l'historique d'une session
export const clearHistory = async (req, res) => {
  try {
    const sessionId = getSessionId(req);
    conversations.delete(sessionId);
    
    res.json({
      message: 'Historique effac√© avec succ√®s',
      sessionId: sessionId
    });
  } catch (error) {
    console.error('Erreur effacement historique:', error);
    res.status(500).json({
      error: 'Erreur lors de l\'effacement de l\'historique'
    });
  }
};